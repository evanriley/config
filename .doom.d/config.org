#+title: Yet Another DOOM Emacs Configuration
#+author: Evan Riley
#+description: Please don't copy this.
#+startup: show2levels indent hidestars
#+options: coverpage:yes
#+property: header-args:emacs-lisp :tangle yes :comments link


#+begin_quote
Yea, this is probably broken...
#+end_quote


* Table of Contents :TOC_3_gh:
- [[#intro][Intro]]
  - [[#notes-for-the-unwary-traveler][Notes for the unwary traveler]]
- [[#doom-configuration][Doom Configuration]]
  - [[#modules][Modules]]
    - [[#initial-setup][Initial Setup]]
    - [[#configuration][Configuration]]
    - [[#completion][Completion]]
    - [[#ui][UI]]
    - [[#editor][Editor]]
    - [[#emacs][Emacs]]
    - [[#terminal][Terminal]]
    - [[#checkers][Checkers]]
    - [[#tools][Tools]]
    - [[#os][OS]]
    - [[#language-support][Language Support]]
    - [[#email][Email]]
    - [[#apps][Apps]]
- [[#packages][Packages]]
    - [[#org-mode][Org Mode]]
    - [[#emacs-additions][Emacs Additions]]
    - [[#programming-tools][Programming Tools]]
    - [[#looks][Looks]]
- [[#basic-configuration][Basic Configuration]]
  - [[#customization][Customization]]
  - [[#better-defaults][Better Defaults]]
  - [[#personal-information][Personal information]]
  - [[#window-management][Window management]]
  - [[#shell][Shell]]
  - [[#fonts][Fonts]]
  - [[#lsp][LSP]]
  - [[#evil][Evil]]
  - [[#magit][Magit]]
- [[#visual-configuration][Visual Configuration]]
  - [[#dashboard][Dashboard]]
  - [[#info-colors][Info Colors]]
  - [[#marginalia][Marginalia]]
  - [[#modeline][Modeline]]
  - [[#theme][Theme]]
  - [[#svg-tag-mode][SVG-tag-mode]]
  - [[#rss][RSS]]
  - [[#ebooks][Ebooks]]
  - [[#org-mode-1][Org-Mode]]
  - [[#org-roam][Org-Roam]]
  - [[#org-agenda][Org-Agenda]]
  - [[#font-display][Font Display]]
  - [[#window-divider][Window Divider]]
  - [[#eldoc][Eldoc]]

* Intro
Let's start out by making this file run /slightly/ faster.

#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
;; This file has been generated from config.org file. DO NOT EDIT.
;; Sources are available from https://github.com/evanriley/config
#+end_src

** Notes for the unwary traveler
This is my Emacs configuration. You may have seen previous ones that tell you to copy and paste snippets of their config
or even use the whole thing to start with. That doesn't apply here. This is thing is a mess. It's a miracle emacs doesn't
just crumble and fall apart once this is loaded. Take what you will from here, but please understand one thing...I'm an idiot.


With that out of the way, shout out to the following people who I've +stolen from+ been inspired by.

- [[https://github.com/tecosaur/emacs-config][tecosaur]]
- [[https://github.com/rougier/dotemacs][rougier]]
- [[https://github.com/gilbertw1/bmacs][gilbertw1]]
- [[https://github.com/zzamboni/dot-doom][zzamboni]]
- [[https://github.com/shaunsingh/nyoom.emacs][shaunsingh]]

* Doom Configuration
This is, after all, a Doom Emacs configuration. We'll start out by configuring Doom and it's modules first.
** Modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

#+name: init.el
#+attr_html: :collapsed t
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :comments no
;;; init.el -*- lexical-binding: t; -*-

;; This file has been generated from config.org file. DO NOT EDIT.
;; Sources are available from https://github.com/evanriley/config

;; This file controls what Doom modules are enabled and what order they load in.
;; Press 'K' on a module to view its documentation, and 'gd' to browse its directory.

*** Initial Setup
(doom! :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>)
#+end_src

*** Configuration
With this being a literate config, let's go ahead and setup the config module and enable the literate module.
We will also use dooms nicer default keybinds and enable +bindings and +smartparens, which weirdly aren't documenuted.
#+name: doom-config
#+begin_src emacs-lisp
literate
(default +bindings +smartparens)
#+end_src

*** Completion
Company and Vertico are all we need here.
#+name: doom-completion
#+begin_src emacs-lisp
(company                     ; the ultimate code completion backend
 +childframe)                ; ... when your children are better than you
(vertico +icons)             ; the search engine of the future
#+end_src

*** UI
Pretty standard selection from the UI module section.
#+name: doom-ui
#+begin_src emacs-lisp
doom-dashboard               ; a nifty splash screen for Emacs
doom-quit                    ; DOOM quit-message prompts when you quit Emacs
(emoji +unicode)             ; ðŸ™‚
hl-todo                      ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;; modeline                     ; snazzy, Atom-inspired modeline, plus API
(ligatures                   ; ligatures and symbols to make your code pnoretty again
 +extra)                     ; for those who dislike letters
ophints                      ; highlight the region an operation acts on
(popup                       ; tame sudden yet inevitable temporary windows
 +all                        ; catch all popups that start with an asterix
 +defaults)                  ; default popup rules
(vc-gutter +pretty)          ; vcs diff in the fringe
vi-tilde-fringe              ; fringe tildes to mark beyond EOB
workspaces                   ; tab emulation, persistence & separate workspaces
zen                          ; distraction-free coding or writing
#+end_src

*** Editor
This obvious Evil and evil everywhere selection.
HACK - parinfer doesn't understand how to compile correctly on M1+ macs. You will likely have to compile
from source manually and copy the correct file to your ~~/.emacs.d/~ folder.
#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere)           ; come to the dark side, we have cookies
(format +onsave)             ; automated prettiness
lispy
parinfer
snippets
#+end_src

*** Emacs
Some classic Emacs here.
#+name: doom-emacs
#+begin_src emacs-lisp
(dired +icons)               ; making dired pretty [functional]
electric                     ; smarter, keyword-based electric-indent
(ibuffer +icons)             ; interactive buffer management
(undo +tree)                 ; persistent, smarter undo for your inevitable mistakes
vc                           ; version-control and Emacs, sitting in a tree
#+end_src

*** Terminal
Vterm is my choice here.
#+name: doom-term
#+begin_src emacs-lisp
vterm                        ; the best terminal emulation in Emacs
#+end_src

*** Checkers
We'll enable all of these here, but only if I actually remembered to download/install what I need to.
#+name: doom-checkers
#+begin_src emacs-lisp
syntax                       ; tasing you for every semicolon you forget
(:if (executable-find "aspell") spell) ; tasing you for misspelling mispelling
(:if (executable-find "languagetool") grammar) ; tasing grammar mistake every you make
#+end_src

*** Tools
#+name: doom-tools
#+begin_src emacs-lisp
direnv
editorconfig
(debugger +lsp)              ; FIXME stepping through code, to help you add bugs
(eval +overlay)              ; run code, run (also, repls)
(lookup                      ; helps you navigate your code and documentation
 +dictionary                 ; dictionary/thesaurus is nice
 +docsets)                   ; ...or in Dash docsets locally
lsp                          ; Language Server Protocol
(magit                       ; a git porcelain for Emacs
 +forge)                     ; interface with git forges
make                         ; run make tasks from emacs
pdf                          ; pdf enhancements
rgb                          ; creating color strings
tree-sitter                  ; Syntax and Parsing sitting in a tree
#+end_src

*** OS
I am but a sheep.
#+name: doom-os
#+begin_src emacs-lisp
(:if IS-MAC macos)           ; improve compatibility with macOS
#+end_src

*** Language Support
We can enable as many of these as we would like, as (usually) they aren't loaded until the
relevant file has been opened.
#+name: doom-lang
#+begin_src emacs-lisp
;;agda                       ; types of types of types of types...
(beancount +lsp)             ; mind the GAAP
(cc +lsp +tree-sitter)       ; C/C++/Obj-C madness
(clojure +lsp)               ; java with a lisp
;;common-lisp                ; if you've seen one lisp, you've seen them all
;;coq                        ; proofs-as-programs
;;crystal                    ; ruby at the speed of c
;;csharp                     ; unity, .NET, and mono shenanigans
data                         ; config/data formats
;;(dart +flutter)            ; paint ui and not much else
;;dhall                      ; JSON with FP sprinkles
;;elixir                     ; erlang done right
;;elm                        ; care for a cup of TEA?
emacs-lisp                   ; drown in parentheses
;;erlang                     ; an elegant language for a more civilized age
;;ess                        ; emacs speaks statistics
;;faust                      ; dsp, but you get to keep your soul
;;fsharp                     ; ML stands for Microsoft's Language
;;fstar                      ; (dependent) types and (monadic) effects and Z3
;;gdscript                   ; the language you waited for
(go                          ; the hipster dialect
 +lsp
 +tree-sitter)
;;(haskell +lsp)             ; a language that's lazier than I am
;;hy                         ; readability of scheme w/ speed of python
;;idris                      ;
(json                        ; At least it ain't XML
 +lsp
 +tree-sitter)
;;(java +lsp)                ; the poster child for carpal tunnel syndrome
(javascript +lsp)            ; all(hope(abandon(ye(who(enter(here))))))
;;(julia +lsp)               ; Python, R, and MATLAB in a blender
;;(kotlin +lsp)              ; a better, slicker Java(Script)
(latex                       ; writing papers in Emacs has never been so fun
 ;;+fold                     ; fold the clutter away nicities
 +latexmk                    ; modern latex plz
 ;;+cdlatex                  ; quick maths symbols
 +lsp)
;;lean                       ; proof that mathematicians need help
;;factor                     ; for when scripts are stacked against you
;;ledger                     ; an accounting system in Emacs
(lua +lsp +fennel)           ; one-based indices? one-based indices
(markdown +grip)             ; writing docs for people to ignore
;;nim                        ; python + lisp at the speed of c
(nix +tree-sitter)           ; I hereby declare "nix geht mehr!"
;;ocaml                      ; an objective camel
(org                         ; organize your plain life in plain text
 +pretty                     ; yessss my pretties! (nice unicode symbols)
 +dragndrop                  ; drag & drop files/images into org buffers
 ;;+hugo                     ; use Emacs for hugo blogging
 +noter                      ; enhanced PDF notetaking
 +pandoc                     ; export-with-pandoc support
 +gnuplot                    ; who doesn't like pretty pictures
 +pomodoro                   ; be fruitful with the tomato technique
 +present                    ; using org-mode for presentations
 +roam2)                     ; wander around notes
;;php                        ; perl's insecure younger brother
;;plantuml                   ; diagrams for confusing people more
;;purescript                 ; javascript, but functional
(python                      ; beautiful is better than ugly
 +lsp
 +pyright
 +tree-sitter
 +conda)
;;qt                         ; the 'cutest' gui framework ever
;;racket                     ; a DSL for DSLs
;;raku                       ; the artist formerly known as perl6
;;rest                       ; Emacs as a REST client
;;rst                        ; ReST in peace
;;(ruby +rails)              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
(rust
  +lsp
  +tree-sitter)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala                      ; java, but good
;;scheme                     ; a fully conniving family of lisps
(sh +lsp +fish +tree-sitter) ; she sells {ba,z,fi}sh shells on the C xor
;;sml                        ; no, the /other/ ML
;;solidity                   ; do you need a blockchain? No.
;;swift                      ; who asked for emoji variables?
;;terra                      ; Earth and Moon in alignment for performance.
(web                         ; the tubes
 +lsp
 +tree-sitter)
yaml                         ; JSON, but readable
(zig                         ; C, but simpler
 +lsp
 +tree-sitter)
#+end_src

*** Email
One day I will enable this and spend most of my time in Emacs, however I simply don't have the patience to get it right. So I'll just stay in Mail.app
#+name: doom-email
#+begin_src emacs-lisp
;; (:if (executable-find "mu") (mu4e +org))
#+end_src

*** Apps
Only going to use the RSS reader from here, and even then, that will be extremely rare. I'll probably remove this at some point.
TODO - Are you actually using the RSS reader?
#+name: doom-app
#+begin_src emacs-lisp
;;calendar                   ; A dated approach to timetabling
;;emms                       ; Multimedia in Emacs is music to my ears
;;everywhere                 ; *leave* Emacs!? You must be joking.
(rss +org)                   ; emacs as an RSS reader
#+end_src

* Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
Unlike most literate configurations I +am lazy+ like to keep all my packages in
one place
#+name: packages.el
#+attr_html: :collapsed t
#+begin_src emacs-lisp :tangle "packages.el" :noweb no-export :comments no
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; This file has been generated from config.org file. DO NOT EDIT.
;; Sources are available from https://github.com/evanriley/config

;;org
<<org>>

;;emacs additions
<<emacs-additions>>

;; prog-tools
<<prog-tools>>

;; looks
<<looks>>
#+end_src

*** Org Mode
Mostly here to make org comfy.
We unpin the org-roam package from doom so that org-roam-ui is less likely to break.
#+name: org
#+begin_src emacs-lisp
(unpin! org-roam)
(package! org-appear)
(package! websocket)
(package! org-roam-ui)
#+end_src

*** Emacs Additions
Emacs is missing just a few packages to improve things here and there. Mainly
- better dictionary support
- improved modal editing
- ebook support
- more colorful docs
#+name: emacs-additions
#+begin_src emacs-lisp
(package! nov)
(package! lexic)
(package! info-colors)
(package! magit-delta :recipe (:host github :repo "dandavison/magit-delta"))
(package! pinentry)
#+end_src

*** Programming Tools
Some tools that may help me while programming.
Currently we have a TabNine subscription that was bought on sale, however I'm not seeing much use out of this
and will likely remove it once the subscription is over.
#+name: prog-tools
#+begin_src emacs-lisp
(package! company-tabnine :recipe (:host github :repo "TommyX12/company-tabnine"))
#+end_src

*** Looks
#+name: looks
#+begin_src emacs-lisp
(package! afternoon-theme)
(package! kaolin-themes)
(package! color-theme-sanityinc-tomorrow)
(package! lambda-themes :recipe (:host github :repo "lambda-emacs/lambda-themes"))
(package! lambda-line :recipe (:host github :repo "lambda-emacs/lambda-line"))
#+end_src
* Basic Configuration
** Customization
Let's do the thing that everyone does, and make sure that our customizations stay out of our init.el.
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

** Better Defaults
The defaults for emacs aren't so good nowadays. Lets fix that up a bit
#+begin_src emacs-lisp
(setq scroll-margin 2
      auto-save-default t
      display-line-numbers-type 'relative
      delete-by-moving-to-trash t
      truncate-string-ellipsis "â€¦"
      browse-url-browser-function 'xwidget-webkit-browse-url)

(fringe-mode 0)
(global-subword-mode 1)
#+end_src

There's issues with emacs flickering on mac (and sometimes wayland). This should
fix it
#+begin_src emacs-lisp
;; (add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
#+end_src

HACK - Heres some fixes for yabai, we obviously only want that under darwin (macOS) though
#+begin_src emacs-lisp
;; (cond
;;  ((string-equal system-type "darwin")
;;   (setq frame-resize-pixelwise  t
;;         window-resize-pixelwise t)))
#+end_src

** Personal information
Tell Emacs who I am
#+begin_src emacs-lisp
(setq user-full-name "Evan Riley"
      user-mail-address "evan@evanriley.dev")
#+end_src

** Window management
First, we'll enter the new window
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

Then, we'll pull up a buffer prompt.
#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

** Shell
Tell vterm to auto compile itself.
#+begin_src emacs-lisp
;; (setq vterm-always-compile-module t)
#+end_src

If the process exits, kill the =vterm= buffer
#+begin_src emacs-lisp
(setq vterm-kill-buffer-on-exit t)
#+end_src

Use ligatures from within vterm, we do this by redefining the variable where /not/ to show ligatures. On the other hand, in select modes we want to use extra ligatures, so lets enable that.
#+begin_src emacs-lisp
(setq +ligatures-in-modes t)
#+end_src

** Fonts
Here I use JuliaMono, and IBM Plex Sans for the proportional stuff.
#+begin_src emacs-lisp
;;  fonts
(setq doom-font (font-spec :family "JuliaMono" :size 16)
      doom-big-font (font-spec :family "JuliaMono" :size 20)
      doom-variable-pitch-font (font-spec :family "IBM Plex Sans" :size 16)
      doom-unicode-font (font-spec :family "JuliaMono")
      doom-serif-font (font-spec :family "IBM Plex Sans" :size 16 :weight 'medium))
#+end_src

** LSP
Make LSP behave a little.
#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-enable-symbol-highlighting nil))

(after! lsp-ui
  (setq lsp-ui-sideline-enable nil  ; no more useful than flycheck
        lsp-ui-doc-enable nil))     ; redundant with K
#+end_src

** Evil
When we do =s/../..= I usually want a global =/g= at the end, so lets make that the default (along with some other tweaks)
#+begin_src emacs-lisp
(after! evil
  (setq evil-ex-substitute-global t     ; I like my s/../.. to by global by default
        evil-move-cursor-back nil       ; Don't move the block cursor when toggling insert mode
        evil-kill-on-visual-paste nil)) ; Don't put overwritten text in the kill ring
#+end_src

Remove the =evil= prefix in which key.
#+begin_src emacs-lisp
(setq which-key-allow-multiple-replacements t
      which-key-idle-delay 0.5) ;; I need the help, I really do
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "ïŒŒ \\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "ïŒŒ \\1"))))
#+end_src

** Magit
Delta is a git diff syntax highlighter written in rust.
The author also wrote a package to hook this into the magit diff view (which doesn't get any syntax highlighting by default).
This requires the delta binary. Itâ€™s packaged on some distributions, but most reliably installed through Rustâ€™s package manager cargo.
#+begin_src emacs-lisp
(after! magit
  (magit-delta-mode +1))
#+end_src

* Visual Configuration
** Dashboard
Nice simple dashbaord with random quotes
#+begin_src emacs-lisp
(setq fancy-splash-image (expand-file-name "misc/splash-images/emacs-e-template.svg" doom-private-dir)
      +doom-dashboard-banner-padding '(0 . 0))

(defvar splash-phrase-source-folder
  (expand-file-name "misc/splash-phrases" doom-private-dir)
  "A folder of text files with a fun phrase on each line.")

(defvar splash-phrase-sources
  (let* ((files (directory-files splash-phrase-source-folder nil "\\.txt\\'"))
         (sets (delete-dups (mapcar
                             (lambda (file)
                               (replace-regexp-in-string "\\(?:-[0-9]+-\\w+\\)?\\.txt" "" file))
                             files))))
    (mapcar (lambda (sset)
              (cons sset
                    (delq nil (mapcar
                               (lambda (file)
                                 (when (string-match-p (regexp-quote sset) file)
                                   file))
                               files))))
            sets))
  "A list of cons giving the phrase set name, and a list of files which contain phrase components.")

(defvar splash-phrase-set
  (nth (random (length splash-phrase-sources)) (mapcar #'car splash-phrase-sources))
  "The default phrase set. See `splash-phrase-sources'.")

(defun splase-phrase-set-random-set ()
  "Set a new random splash phrase set."
  (interactive)
  (setq splash-phrase-set
        (nth (random (1- (length splash-phrase-sources)))
             (cl-set-difference (mapcar #'car splash-phrase-sources) (list splash-phrase-set))))
  (+doom-dashboard-reload t))

(defvar splase-phrase--cache nil)

(defun splash-phrase-get-from-file (file)
  "Fetch a random line from FILE."
  (let ((lines (or (cdr (assoc file splase-phrase--cache))
                   (cdar (push (cons file
                                     (with-temp-buffer
                                       (insert-file-contents (expand-file-name file splash-phrase-source-folder))
                                       (split-string (string-trim (buffer-string)) "\n")))
                               splase-phrase--cache)))))
    (nth (random (length lines)) lines)))

(defun splash-phrase (&optional set)
  "Construct a splash phrase from SET. See `splash-phrase-sources'."
  (mapconcat
   #'splash-phrase-get-from-file
   (cdr (assoc (or set splash-phrase-set) splash-phrase-sources))
   " "))

(defun doom-dashboard-phrase ()
  "Get a splash phrase, flow it over multiple lines as needed, and make fontify it."
  (mapconcat
   (lambda (line)
     (+doom-dashboard--center
      +doom-dashboard--width
      (with-temp-buffer
        (insert-text-button
         line
         'action
         (lambda (_) (+doom-dashboard-reload t))
         'face 'doom-dashboard-menu-title
         'mouse-face 'doom-dashboard-menu-title
         'help-echo "Random phrase"
         'follow-link t)
        (buffer-string))))
   (split-string
    (with-temp-buffer
      (insert (splash-phrase))
      (setq fill-column (min 70 (/ (* 2 (window-width)) 3)))
      (fill-region (point-min) (point-max))
      (buffer-string))
    "\n")
   "\n"))

(defadvice! doom-dashboard-widget-loaded-with-phrase ()
  :override #'doom-dashboard-widget-loaded
  (setq line-spacing 0.2)
  (insert
   "\n\n"
   (propertize
    (+doom-dashboard--center
     +doom-dashboard--width
     (doom-display-benchmark-h 'return))
    'face 'doom-dashboard-loaded)
   "\n"
   (doom-dashboard-phrase)
   "\n"))

;; remove useless dashboard info
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src

** Info Colors
Make the Info pages look a little nicer.

To use this we'll just hook it into =Info=.
#+begin_src emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src

** Marginalia
#+begin_src emacs-lisp
(after! marginalia
  (setq marginalia--ellipsis "â€¦"    ; Nicer ellipsis
        marginalia-align 'right     ; right alignment
        marginalia-align-offset -1)) ; one space on the right
#+end_src

** Modeline
#+begin_src emacs-lisp
(use-package lambda-line
  :custom
  (lambda-line-icon-time t) ;; requires ClockFace font (see below)
  (lambda-line-clockface-update-fontset "ClockFaceRect") ;; set clock icon
  (lambda-line-position 'top) ;; Set position of status-line
  (lambda-line-abbrev t) ;; abbreviate major modes
  (lambda-line-hspace "  ")  ;; add some cushion
  (lambda-line-prefix nil) ;; use a prefix symbol
  (lambda-line-prefix-padding nil) ;; no extra space for prefix
  (lambda-line-status-invert nil)  ;; no invert colors
  (lambda-line-gui-ro-symbol  " â¨‚") ;; symbols
  (lambda-line-gui-mod-symbol " â¬¤")
  (lambda-line-gui-rw-symbol  " â—¯")
  (lambda-line-space-top +.50)  ;; padding on top and bottom of line
  (lambda-line-space-bottom -.50)
  (lambda-line-symbol-position 0.1) ;; adjust the vertical placement of symbol
  :config
  ;; activate lambda-line
  (lambda-line-mode)
  ;; set divider line in footer
  (when (eq lambda-line-position 'top)
    (setq-default mode-line-format (list "%_"))
    (setq mode-line-format (list "%_"))))

;; (after! doom-modeline
;;   (doom-modeline-def-segment buffer-name
;;     "Display the current buffer's name, without any other information."
;;     (concat
;;      (doom-modeline-spc)
;;      (doom-modeline--buffer-name)))
;;
;;   (doom-modeline-def-segment pdf-icon
;;     "PDF icon from all-the-icons."
;;     (concat
;;      (doom-modeline-spc)
;;      (doom-modeline-icon 'octicon "file-pdf" nil nil
;;                          :face (if (doom-modeline--active)
;;                                    'all-the-icons-red
;;                                  'mode-line-inactive)
;;                          :v-adjust 0.02)))
;;
;;   (defun doom-modeline-update-pdf-pages ()
;;     "Update PDF pages."
;;     (setq doom-modeline--pdf-pages
;;           (let ((current-page-str (number-to-string (eval `(pdf-view-current-page))))
;;                 (total-page-str (number-to-string (pdf-cache-number-of-pages))))
;;             (concat
;;              (propertize
;;               (concat (make-string (- (length total-page-str) (length current-page-str)) ? )
;;                       " P" current-page-str)
;;               'face 'mode-line)
;;              (propertize (concat "/" total-page-str) 'face 'doom-modeline-buffer-minor-mode)))))
;;
;;   (doom-modeline-def-segment pdf-pages
;;     "Display PDF pages."
;;     (if (doom-modeline--active) doom-modeline--pdf-pages
;;       (propertize doom-modeline--pdf-pages 'face 'mode-line-inactive)))
;;
;;   (doom-modeline-def-modeline 'pdf
;;     '(bar window-number pdf-pages pdf-icon buffer-name)
;;     '(misc-info matches major-mode process vcs)))
;;
;; (custom-set-faces!
;;   '(doom-modeline-buffer-modified :foreground "orange"))
;;
;;
;; (defun doom-modeline-conditional-buffer-encoding ()
;;   "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
;;   (setq-local doom-modeline-buffer-encoding
;;               (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
;;                                  '(coding-category-undecided coding-category-utf-8))
;;                            (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
;;                 t)))
;;
;; (add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src
** Theme
#+begin_src emacs-lisp
;; Lambda Themes
;; (use-package lambda-themes
;;   :custom
;;   (lambda-themes-set-italic-comments t)
;;   (lambda-themes-set-italic-keywords t)
;;   (lambda-themes-set-variable-pitch t)
;;   :config
;;   ;; load preferred theme
;;   (load-theme 'lambda-dark))

;; Afternoon Theme
;; (load-theme 'afternoon t)

;; Sanity Inc Themes
;; (use-package color-theme-sanityinc-tomorrow
;;   :ensure t
;;   :config
;;   (load-theme 'sanityinc-tomorrow-night t))

;; Kaolin Themes
(use-package kaolin-themes
  :config
  (load-theme 'kaolin-aurora  t))
#+end_src

** SVG-tag-mode
Replace org-modern, some what heavier but looks way better.
#+begin_src emacs-lisp
(use-package svg-tag-mode
  :commands svg-tag-mode
  :config
  (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
  (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
  (defconst day-re "[A-Za-z]\\{3\\}")
  (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

  (defun svg-progress-percent (value)
    (svg-image (svg-lib-concat
                (svg-lib-progress-bar (/ (string-to-number value) 100.0)
                                  nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                (svg-lib-tag (concat value "%")
                             nil :stroke 0 :margin 0)) :ascent 'center))

  (defun svg-progress-count (value)
    (let* ((seq (mapcar #'string-to-number (split-string value "/")))
           (count (float (car seq)))
           (total (float (cadr seq))))
    (svg-image (svg-lib-concat
                (svg-lib-progress-bar (/ count total) nil
                                      :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                (svg-lib-tag value nil
                             :stroke 0 :margin 0)) :ascent 'center)))

  (setq svg-tag-tags
        `(
          ;; Org tags
          (":\\([A-Za-z0-9]+\\)" . ((lambda (tag) (svg-tag-make tag))))
          (":\\([A-Za-z0-9]+[ \-]\\)" . ((lambda (tag) tag)))

          ;; Task priority
          ("\\[#[A-Z]\\]" . ( (lambda (tag)
                                (svg-tag-make tag :face 'org-priority
                                              :beg 2 :end -1 :margin 0))))

          ;; Progress
          ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                              (svg-progress-percent (substring tag 1 -2)))))
          ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                            (svg-progress-count (substring tag 1 -1)))))

          ;; TODO / DONE
          ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
          ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))


          ;; Citation of the form [cite:@Knuth:1984]
          ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
                                            (svg-tag-make tag
                                                          :inverse t
                                                          :beg 7 :end -1
                                                          :crop-right t))))
          ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
                                                  (svg-tag-make tag
                                                                :end -1
                                                                :crop-left t))))


          ;; Active date (with or without day name, with or without time)
          (,(format "\\(<%s>\\)" date-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :end -1 :margin 0))))
          (,(format "\\(<%s \\)%s>" date-re day-time-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
          (,(format "<%s \\(%s>\\)" date-re day-time-re) .
           ((lambda (tag)
              (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

          ;; Inactive date  (with or without day name, with or without time)
           (,(format "\\(\\[%s\\]\\)" date-re) .
            ((lambda (tag)
               (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
           (,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) .
            ((lambda (tag)
               (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
           (,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) .
            ((lambda (tag)
               (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date)))))))
#+end_src

** RSS
RIP Google Reader.
#+begin_src emacs-lisp
(map! :map elfeed-search-mode-map
      :after elfeed-search
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :n "q" #'+rss/quit
      :n "e" #'elfeed-update
      :n "r" #'elfeed-search-untag-all-unread
      :n "u" #'elfeed-search-tag-all-unread
      :n "s" #'elfeed-search-live-filter
      :n "RET" #'elfeed-search-show-entry
      :n "p" #'elfeed-show-pdf
      :n "+" #'elfeed-search-tag-all
      :n "-" #'elfeed-search-untag-all
      :n "S" #'elfeed-search-set-filter
      :n "b" #'elfeed-search-browse-url
      :n "y" #'elfeed-search-yank)
(map! :map elfeed-show-mode-map
      :after elfeed-show
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :nm "q" #'+rss/delete-pane
      :nm "o" #'ace-link-elfeed
      :nm "RET" #'org-ref-elfeed-add
      :nm "n" #'elfeed-show-next
      :nm "N" #'elfeed-show-prev
      :nm "p" #'elfeed-show-pdf
      :nm "+" #'elfeed-show-tag
      :nm "-" #'elfeed-show-untag
      :nm "s" #'elfeed-show-new-live-search
      :nm "y" #'elfeed-show-yank)

(after! elfeed-search
  (set-evil-initial-state! 'elfeed-search-mode 'normal))
(after! elfeed-show-mode
  (set-evil-initial-state! 'elfeed-show-mode   'normal))

(after! evil-snipe
  (push 'elfeed-show-mode   evil-snipe-disabled-modes)
  (push 'elfeed-search-mode evil-snipe-disabled-modes))

(after! elfeed
  (elfeed-org)
  (use-package! elfeed-link)
  (setq rmh-elfeed-org-files '("~/org/elfeed.org"))

  (setq elfeed-search-filter "@1-week-ago +unread"
        elfeed-search-print-entry-function '+rss/elfeed-search-print-entry
        elfeed-search-title-min-width 80
        elfeed-show-entry-switch #'pop-to-buffer
        elfeed-show-entry-delete #'+rss/delete-pane
        elfeed-show-refresh-function #'+rss/elfeed-show-refresh--better-style
        shr-max-image-proportion 0.6)

  (add-hook! 'elfeed-show-mode-hook (hide-mode-line-mode 1))
  (add-hook! 'elfeed-search-update-hook #'hide-mode-line-mode)

  (defface elfeed-show-title-face '((t (:weight ultrabold :slant italic :height 1.5)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (defface elfeed-show-author-face `((t (:weight light)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (set-face-attribute 'elfeed-search-title-face nil
                      :foreground 'nil
                      :weight 'light)

  (defadvice! +rss-elfeed-wrap-h-nicer ()
    "Enhances an elfeed entry's readability by wrapping it to a width of
`fill-column' and centering it with `visual-fill-column-mode'."
    :override #'+rss-elfeed-wrap-h
    (setq-local truncate-lines nil
                shr-width 120
                visual-fill-column-center-text t
                default-text-properties '(line-height 1.1))
    (let ((inhibit-read-only t)
          (inhibit-modification-hooks t))
      (visual-fill-column-mode)
      ;; (setq-local shr-current-font '(:family "Merriweather" :height 1.2))
      (set-buffer-modified-p nil)))

  (defun +rss/elfeed-search-print-entry (entry)
    "Print ENTRY to the buffer."
    (let* ((elfeed-goodies/tag-column-width 40)
           (elfeed-goodies/feed-source-column-width 30)
           (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
           (feed (elfeed-entry-feed entry))
           (feed-title
            (when feed
              (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
           (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
           (tags-str (concat (mapconcat 'identity tags ",")))
           (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                           elfeed-goodies/tag-column-width 4))

           (tag-column (elfeed-format-column
                        tags-str (elfeed-clamp (length tags-str)
                                               elfeed-goodies/tag-column-width
                                               elfeed-goodies/tag-column-width)
                        :left))
           (feed-column (elfeed-format-column
                         feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width)
                         :left)))

      (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
      (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
      (insert (propertize title 'face title-faces 'kbd-help title))))

  (defun +rss/elfeed-show-refresh--better-style ()
    "Update the buffer to match the selected entry, using a mail-style."
    (interactive)
    (let* ((inhibit-read-only t)
           (title (elfeed-entry-title elfeed-show-entry))
           (date (seconds-to-time (elfeed-entry-date elfeed-show-entry)))
           (author (elfeed-meta elfeed-show-entry :author))
           (link (elfeed-entry-link elfeed-show-entry))
           (tags (elfeed-entry-tags elfeed-show-entry))
           (tagsstr (mapconcat #'symbol-name tags ", "))
           (nicedate (format-time-string "%a, %e %b %Y %T %Z" date))
           (content (elfeed-deref (elfeed-entry-content elfeed-show-entry)))
           (type (elfeed-entry-content-type elfeed-show-entry))
           (feed (elfeed-entry-feed elfeed-show-entry))
           (feed-title (elfeed-feed-title feed))
           (base (and feed (elfeed-compute-base (elfeed-feed-url feed)))))
      (erase-buffer)
      (insert "\n")
      (insert (format "%s\n\n" (propertize title 'face 'elfeed-show-title-face)))
      (insert (format "%s\t" (propertize feed-title 'face 'elfeed-search-feed-face)))
      (when (and author elfeed-show-entry-author)
        (insert (format "%s\n" (propertize author 'face 'elfeed-show-author-face))))
      (insert (format "%s\n\n" (propertize nicedate 'face 'elfeed-log-date-face)))
      (when tags
        (insert (format "%s\n"
                        (propertize tagsstr 'face 'elfeed-search-tag-face))))
      ;; (insert (propertize "Link: " 'face 'message-header-name))
      ;; (elfeed-insert-link link link)
      ;; (insert "\n")
      (cl-loop for enclosure in (elfeed-entry-enclosures elfeed-show-entry)
               do (insert (propertize "Enclosure: " 'face 'message-header-name))
               do (elfeed-insert-link (car enclosure))
               do (insert "\n"))
      (insert "\n")
      (if content
          (if (eq type 'html)
              (elfeed-insert-html content base)
            (insert content))
        (insert (propertize "(empty)\n" 'face 'italic)))
      (goto-char (point-min)))))

(after! elfeed-show
  (require 'url)

  (defvar elfeed-pdf-dir
    (expand-file-name "pdfs/"
                      (file-name-directory (directory-file-name elfeed-enclosure-default-dir))))

  (defvar elfeed-link-pdfs
    '(("https://www.jstatsoft.org/index.php/jss/article/view/v0\\([^/]+\\)" . "https://www.jstatsoft.org/index.php/jss/article/view/v0\\1/v\\1.pdf")
      ("http://arxiv.org/abs/\\([^/]+\\)" . "https://arxiv.org/pdf/\\1.pdf"))
    "List of alists of the form (REGEX-FOR-LINK . FORM-FOR-PDF)")

  (defun elfeed-show-pdf (entry)
    (interactive
     (list (or elfeed-show-entry (elfeed-search-selected :ignore-region))))
    (let ((link (elfeed-entry-link entry))
          (feed-name (plist-get (elfeed-feed-meta (elfeed-entry-feed entry)) :title))
          (title (elfeed-entry-title entry))
          (file-view-function
           (lambda (f)
             (when elfeed-show-entry
               (elfeed-kill-buffer))
             (pop-to-buffer (find-file-noselect f))))
          pdf)

      (let ((file (expand-file-name
                   (concat (subst-char-in-string ?/ ?, title) ".pdf")
                   (expand-file-name (subst-char-in-string ?/ ?, feed-name)
                                     elfeed-pdf-dir))))
        (if (file-exists-p file)
            (funcall file-view-function file)
          (dolist (link-pdf elfeed-link-pdfs)
            (when (and (string-match-p (car link-pdf) link)
                       (not pdf))
              (setq pdf (replace-regexp-in-string (car link-pdf) (cdr link-pdf) link))))
          (if (not pdf)
              (message "No associated PDF for entry")
            (message "Fetching %s" pdf)
            (unless (file-exists-p (file-name-directory file))
              (make-directory (file-name-directory file) t))
            (url-copy-file pdf file)
            (funcall file-view-function file)))))))
#+end_src

** Ebooks
Use nov to read ebooks.
#+begin_src emacs-lisp
(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (map! :map nov-mode-map
        :n "RET" #'nov-scroll-up)

  (advice-add 'nov-render-title :override #'ignore)
  (defun +nov-mode-setup ()
    (face-remap-add-relative 'default :height 1.3)
    (setq-local next-screen-context-lines 4
                shr-use-colors nil)
    (require 'visual-fill-column nil t)
    (setq-local visual-fill-column-center-text t
                visual-fill-column-width 81
                nov-text-width 80)
    (visual-fill-column-mode 1)
    (add-to-list '+lookup-definition-functions #'+lookup/dictionary-definition)
    (add-hook 'nov-mode-hook #'+nov-mode-setup)))
#+end_src

** Org-Mode
Basic Org Settings
#+begin_src emacs-lisp
(after! org
  (setq org-directory "~/Documents/org/"          ; let's put files here
        org-ellipsis "  ï¬‹"                        ; cute icon for folded org blocks
        org-list-allow-alphabetical t             ; have a. A. a) A) list bullets
        org-use-property-inheritance t            ; it's convenient to have properties inherited
        org-catch-invisible-edits 'smart          ; try not to accidently do weird stuff in invisible regions
        org-log-done 'time                        ; having the time a item is done sounds convenient
        org-roam-directory "~/Documents/org/Notes/"))        ; same thing, for roam
#+end_src

And some extra fontification doesn't hurt
#+begin_src emacs-lisp
(after! org
  (setq org-src-fontify-natively t
        org-fontify-whole-heading-line t
        org-inline-src-prettify-results '("âŸ¨" . "âŸ©")
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t))
#+end_src

I want to slightly change the default args for babel
#+begin_src emacs-lisp
(after! org
  (setq org-babel-default-header-args
        '((:session . "none")
          (:results . "replace")
          (:exports . "code")
          (:cache . "no")
          (:noweb . "no")
          (:hlines . "no")
          (:tangle . "no")
          (:comments . "link"))))
#+end_src

I also want to change the order of bullets
#+begin_src emacs-lisp
(after! org
  (setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+") ("1." . "a."))))
#+end_src

And the default dashes and =+= signs just don't cut it anymore. Lets make them fancy bullets instead
#+begin_src emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([+]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â—¦"))))))
#+end_src

** Org-Roam
Lets set up =org-roam-ui=
#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :commands org-roam-ui-open
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

Now, I want to replace the org-roam buffer with org-roam-ui, to do that, we need
to disable the regular buffer
#+begin_src emacs-lisp
(after! org-roam
  (setq +org-roam-open-buffer-on-find-file nil))
#+end_src

** Org-Agenda
Set the directory
#+begin_src emacs-lisp
(after! org-agenda
  (setq org-agenda-files (list "~/Documents/org/work.org"
                               "~/Documents/org/todo.org"))
  (setq org-agenda-window-setup 'current-window
        org-agenda-restore-windows-after-quit t
        org-agenda-show-all-dates nil
        org-agenda-time-in-grid t
        org-agenda-show-current-time-in-grid t
        org-agenda-start-on-weekday 1
        org-agenda-span 7
        org-agenda-tags-column 0
        org-agenda-block-separator nil
        org-agenda-category-icon-alist nil
        org-agenda-sticky t)
  (setq org-agenda-prefix-format
        '((agenda . "%i %?-12t%s")
          (todo .   "%i")
          (tags .   "%i")
          (search . "%i")))
  (setq org-agenda-sorting-strategy
        '((agenda deadline-down scheduled-down todo-state-up time-up
                  habit-down priority-down category-keep)
          (todo   priority-down category-keep)
          (tags   timestamp-up priority-down category-keep)
          (search category-keep))))
#+end_src

** Font Display
It seems reasonable to have deadlines in the error face when they're passed.
#+begin_src emacs-lisp
(after! org
  (setq org-agenda-deadline-faces
        '((1.0 . error)
          (1.0 . org-warning)
          (0.5 . org-upcoming-deadline)
          (0.0 . org-upcoming-distant-deadline))))
#+end_src

And lets conceal *those* /syntax/ +markers+.
#+begin_src emacs-lisp
(use-package! org-appear
  :after org
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autolinks t
        org-appear-autosubmarkers t))
#+end_src

(sub|super)script characters
Annoying having to gate these, so let's fix that
#+begin_src emacs-lisp
(setq org-export-with-sub-superscripts '{})
#+end_src

Make verbatim different to code
=verbatim= use ~verb~ instead of ~protectedtexttt~ (default).
#+begin_src emacs-lisp
(after! org
  (setq org-latex-text-markup-alist
        '((bold . "\\textbf{%s}")
          (code . protectedtexttt)
          (italic . "\\emph{%s}")
          (strike-through . "\\sout{%s}")
          (underline . "\\uline{%s}")
          (verbatim . verb))))
#+end_src

** Window Divider
#+begin_src emacs-lisp
(use-package frame
  :custom
  (window-divider-default-right-width 12)
  (window-divider-default-bottom-width 1)
  (window-divider-default-places 'right-only)
  (window-divider-mode t))
;; Make sure new frames use window-divider
(add-hook 'before-make-frame-hook 'window-divider-mode)
#+end_src

** Eldoc
Disable weird jumpy eldoc thing
Seriously, I hate this so much...
#+begin_src emacs-lisp
(setq eldoc-message-function #'ignore)
#+end_src
