#+title: My Doom Emacs Config
#+subtitle: That one config file that changes almost everyday.
#+author: evanriley

#+begin_quote
If you put your dotfiles on github, and constantly tweak them.
It kinda looks like you're doing actually work.
#+end_quote

* Introduction
Here is my emacs config, in literate form. I also use neovim, the dotfiles which you can also find in this repo.
But something just keeps bring me back to emacs. It does almost everything I need and it does it in an incredibly
comfortable way. Things just make /sense./

** Notes for those who steal (like me!)
This config is +stolen from+ inspired by the following people.

- [[https://tecosaur.github.io/emacs-config/config.html][tecosaur]]
- [[https://github.com/hlissner/doom-emacs-private][hlissner]]
- [[https://gitlab.com/zzamboni/dot-doom][zzamboni]]

Who all have better, more organized, and a lot more sensible ideas that you should look.
If for some reason you decide to use mine instead...you should absolutely NOT copy this entire thing.
Things will break and both you and I will have no idea why.

Some settings in this config require the emacs-mac port from mituharu. I'll be completely honest and say
I don't remember which settings those are...

** Extra requirements.

This config uses the following fonts
- Jet Brains Mono Nerd Font
- Overpass
- IBM Plex Mono

Also a number of lsp's, which will require going through the ~init.el~ and looking for the ~+lsp~ flag.

** Current Issues
...Yes.

* Setup
Speeds up this file /slightly/
#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

** Personal information
This information is used by numeration plugins, let's get it setup nice and early.
#+begin_src emacs-lisp
(setq user-full-name "Evan Riley"
      user-mail-address "git@evanriley.me")
#+end_src

Tecosaur has a great point about the location of ~.authinfo.gpg~ let's follow his lead here and move it.

#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry nil)
#+end_src


** Some Defaults
*** macOS Settings
Let's make mac a little more comfortable to use
#+begin_src emacs-lisp
(cond (IS-MAC
         (setq mac-command-modifier      'meta
               mac-option-modifier       'alt
               mac-right-option-modifier 'alt)))
#+end_src


I belive this requires the mituharu emacs-mac port
Give us a nice looking titlebar
#+begin_src emacs-lisp
(when (eq system-type 'darwin) (ns-auto-titlebar-mode))
#+end_src

*** Boring Defaults
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t ; Delete files to trash
 window-combination-resize t ; take new window space from all other windows, not just current
 x-stretch-cursor t)         ; Strecth cursor to the glyph width
#+end_src

Raise the undo limit and make undo a bit more granular
#+begin_src emacs-lisp
(setq undo-limit 8000000
      evil-want-fine-undo t)
#+end_src

Enable auto-save and backup files
#+begin_src emacs-lisp
(setq auto-save-default t
      make-backup-files t)
#+end_src

Use unicode ellipsis for a nice look, and little space gain
#+begin_src emacs-lisp
(setq truncate-string-ellipsis "…")
#+end_src

Keep the password FOREVER. (very sane, amirite?)
#+begin_src emacs-lisp
(setq password-cache-expiry nil)
#+end_src

Display the time in the modeline
#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src

Iterate through CamelCase words
#+begin_src emacs-lisp
(global-subword-mode 1)
#+end_src

*** Window Stuff
Ask which buffer I want to see after splitting the window.
First open the split
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

Then open up the buffer prompt
#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
#+end_src

/Stolen from TEC/
Window rotation is nice, and can be found under =SPC w r= and =SPC w R=.
/Layout/ rotation is also nice though. Let's stash this under =SPC w SPC=, inspired
by Tmux's use of =C-b SPC= to rotate windows.

We could also do with adding the missing arrow-key variants of the window
navigation/swapping commands.
#+begin_src emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"     #'evil-window-left
      "<down>"     #'evil-window-down
      "<up>"       #'evil-window-up
      "<right>"    #'evil-window-right
      ;; Swapping windows
      "C-<left>"       #'+evil/window-move-left
      "C-<down>"       #'+evil/window-move-down
      "C-<up>"         #'+evil/window-move-up
      "C-<right>"      #'+evil/window-move-right)
#+end_src

** Doom Configuration
*** Modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
Doom has a /modular configuration base/ that takes a lot of the boring working out of configuring emacs.
Each module, when enabled, provides a list of packages to install and a base configuration that is applied.
Each module also comes with flags to alter their behavior.
#+name: init.el
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :comments no
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load in.
;; Press 'K' on a module to view its documentation.

(doom!  :input
        <<doom-input>>

        :completion
        <<doom-completion>>

        :ui
        <<doom-ui>>

        :editor
        <<doom-editor>>

        :emacs
        <<doom-emacs>>

        :term
        <<doom-term>>

        :checkers
        <<doom-checkers>>

        :tools
        <<doom-tools>>

        :os
        <<doom-os>>

        :lang
        <<doom-lang>>

        :email
        <<doom-email>>

        :app
        <<doom-app>>

        :config
        <<doom-config>>
        )
#+end_src

**** Structure
This ia literate config, we should enable Doom's literate module.
While we're here, we'll also enable the doom nice default's.
#+name: doom-config
#+begin_src emacs-lisp
literate
(default +bindings +smartparens)
#+end_src

This is just here for consistency.
#+name: doom-input
#+begin_src emacs-lisp
;;chinese
;;japanese
;;layout            ; auie,ctsrnm is the superior home row
#+end_src

**** Interface
The section in which I enable most doom modules.
#+name: doom-completion
#+begin_src emacs-lisp
(company
 +childframe)           ; the ultimate code completion backend
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
;;ivy               ; a search engine for love and life
(vertico            ; the search engine of the future
 +icons)
#+end_src


#+name: doom-ui
#+begin_src emacs-lisp
;;deft              ; notational velocity for Emacs
doom                ; what makes DOOM look the way it does
doom-dashboard      ; a nifty splash screen for Emacs
doom-quit           ; DOOM quit-message prompts when you quit Emacs
(emoji +unicode)    ; 🙂
hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra
;;indent-guides     ; highlighted indent columns
(ligatures +extra)  ; ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
modeline            ; snazzy, Atom-inspired modeline, plus API
nav-flash           ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints             ; highlight the region an operation acts on
(popup              ; tame sudden yet inevitable temporary windows
 +all
 +defaults)
;;tabs              ; a tab bar for Emacs
treemacs            ; a project drawer, like neotree but cooler
;;unicode           ; extended unicode support for various languages
vc-gutter           ; vcs diff in the fringe
vi-tilde-fringe     ; fringe tildes to mark beyond EOB
(window-select      ; visually switch windows
 +numbers)
workspaces          ; tab emulation, persistence & separate workspaces
zen                 ; distraction-free coding or writing
#+end_src

#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere)  ; come to the dark side, we have cookies
file-templates      ; auto-snippets for empty files
fold                ; (nigh) universal code folding
(format +onsave)    ; automated prettiness
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
multiple-cursors    ; editing in many places at once
;;objed             ; text object editing for the innocent
parinfer            ; turn lisp into python, sort of
rotate-text         ; cycle region at point between text candidates
snippets            ; my elves. They type so I don't have to
;;word-wrap         ; soft wrapping with language-aware indent
#+end_src

#+name: doom-emacs
#+begin_src emacs-lisp
(dired +icons)      ; making dired pretty [functional]
electric            ; smarter, keyword-based electric-indent
(ibuffer +icons)    ; interactive buffer management
undo                ; persistent, smarter undo for your inevitable mistakes
vc                  ; version-control and Emacs, sitting in a tree
#+end_src

#+name: doom-term
#+begin_src emacs-lisp
;;eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm               ; the best terminal emulation in Emacs
#+end_src

#+name: doom-checkers
#+begin_src emacs-lisp
syntax              ; tasing you for every semicolon you forget
;;(spell +flyspell) ; tasing you for misspelling mispelling
;;grammar           ; tasing grammar mistake every you make
#+end_src

#+name: doom-tools
#+begin_src emacs-lisp
ansible
;;debugger          ; FIXME stepping through code, to help you add bugs
direnv
docker
;;editorconfig      ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval +overlay)     ; run code, run (also, repls)
gist                ; interacting with github gists
(lookup             ; navigate your code and its documentation
 +dictionary
 +docsets)
lsp                 ; M-x vscode
(magit              ; a git porcelain for Emacs
 +forge)
make                ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf                 ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
rgb                 ; creating color strings
;;taskrunner        ; taskrunner for all your projects
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
upload              ; map local to remote projects via ssh/ftp
#+end_src

#+name: doom-os
#+begin_src emacs-lisp
macos               ; improve compatibility with macOS
tty                 ; improve the terminal Emacs experience
#+end_src

**** Language Support
We can enable as many of these as we want, packages associated with these modules won't load until you first open an associated file.
#+name: doom-lang
#+begin_src emacs-lisp
;;agda              ; types of types of types of types...
;;beancount         ; mind the GAAP
;;cc                ; C > C++ == 1
clojure             ; java with a lisp
common-lisp         ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
data                ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
;;dhall
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp          ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;factor
;;faust             ; dsp, but you get to keep your soul
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
(go                  ; the hipster dialect
 +lsp)
;;(haskell +dante)  ; a language that's lazier than I am
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
json                ; At least it ain't XML
;;(java +meghanada) ; the poster child for carpal tunnel syndrome
(javascript         ; all(hope(abandon(ye(who(enter(here))))))
 +lsp)
;;julia             ; a better, faster MATLAB
kotlin            ; a better, slicker Java(Script)
;;latex             ; writing papers in Emacs has never been so fun
;;lean              ; for folks with too much to prove
;;ledger            ; be audit you can be
;;lua               ; one-based indices? one-based indices
markdown            ; writing docs for people to ignore
nim               ; python + lisp at the speed of c
;;nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org                ; organize your plain life in plain text
 +pretty
 +dragndrop
 +noter
 +jupyter
 +pandoc
 +gnuplot
 +pomodoro
 +present
 +roam2)
;;php               ; perl's insecure younger brother
;;plantuml          ; diagrams for confusing people more
;;purescript        ; javascript, but functional
;;python            ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
(ruby               ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
 +lsp
 +rails)
(rust
 +lsp)               ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;(scheme +guile)   ; a fully conniving family of lisps
;;sh                ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity          ; do you need a blockchain? No.
swift               ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
web                 ; the tubes
yaml                ; JSON, but readable
zig                 ; C, but simpler
#+end_src

**** Everything In Emacs
Imagine having to open something other than Emacs...Couldn't be me.
#+name: doom-email
#+begin_src emacs-lisp
;; (mu4e +org +gmail)
;;notmuch
;;(wanderlust +gmail)
#+end_src

#+name: doom-app
#+begin_src emacs-lisp
;;calendar
;;emms
everywhere        ; *leave* Emacs!? You must be joking
irc               ; how neckbeards socialize
(rss +org)        ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought
#+end_src

*** Visual
**** Fonts
Let's try JuliaMono
#+begin_src emacs-lisp
(setq
 doom-font (font-spec :family "JuliaMono" :size 16)
 doom-big-font (font-spec :family "JuliaMono" :size 36)
 doom-variable-pitch-font (font-spec :family "JuliaMono" :size 16)
 doom-serif-font (font-spec :family "JuliaMono" :weight 'light))
#+end_src


**** Theme and Modeline
#+begin_src emacs-lisp
(setq doom-theme 'doom-tokyo-night)
#+end_src

But lets make make org blocks a little more...enjoyable to look at.
#+begin_src emacs-lisp
(custom-set-faces!
  `(org-block :background ,(doom-darken 'bg 0.3)))
(custom-set-faces!
  `(org-block-begin-line :background ,(doom-darken 'bg 0.2)))
(custom-set-faces!
  `(org-block-end-line :background ,(doom-darken 'bg 0.2)))
#+end_src

=LF UTF-8= is the default file encoding, and I would rather it not show up on the modeline when editing files.
#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  (setq-local doom-modeline-buffer-encoding
        (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                           '(coding-category-undecided coding-category-utf-8))
                     (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
          t)))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src

**** Other
Nice default buffer names.
#+begin_src emacs-lisp
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Doom")
#+end_src

*** Dashboard quick actions

The dashboard is its on major mode, we can use this to our advantage to allow single-key action commands
#+begin_src emacs-lisp
(map! :map +doom-dashboard-mode-map
      :ne "f" #'find-file
      :ne "r" #'consult-recent-file
      :ne "p" #'doom/open-private-config
      :ne "c" (cmd! (find-file (expand-file-name "config.org" doom-private-dir)))
      :ne "." (cmd! (doom-project-find-file "~/.config/")) ; . for dotfiles
      :ne "b" #'+vertico/switch-workspace-buffer
      :ne "B" #'consult-buffer
      :ne "q" #'save-buffers-kill-terminal)
#+end_src


** Other things.
*** Editor interaction
**** Mouse Buttons
#+begin_src emacs-lisp
(map! :n [mouse-8] #'better-jumper-jump-backward
      :n [mouse-9] #'better-jumper-jump-forward)
#+end_src

*** Window title
Have just the buffer name, but if I'm in a project, also have the folder name
#+begin_src emacs-lisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))))
#+end_src

*** Splash Screen
Some nice ascii text for the splash screen.
#+begin_src emacs-lisp
(defun doom-dashboard-draw-ascii-emacs-banner-fn ()
  (let* ((banner
          '(",---.,-.-.,---.,---.,---."
            "|---'| | |,---||    `---."
            "`---'` ' '`---^`---'`---'"))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(setq +doom-dashboard-ascii-banner-fn #'doom-dashboard-draw-ascii-emacs-banner-fn)
#+end_src

And then disable the "doom useful commands" section
#+begin_src emacs-lisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src

* Packages
** Loading Instructions
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
This is where you isntall packages. You delcare them with ~package!~ in =packages.el=
Then run doom sync on the command line.
Don't by compile this file.
#+begin_src emacs-lisp :tangle "packages.el" :comments no
;; -*- no-byte-compile: t; -*-
#+end_src

Afterwards restart Emacs, or maybe just =M-x doom/reload= or =SPC h r r=

*** Packages in MELPA/ELPA/emacsmirror
To install ~some-package~ from MELPA, ELPA or emacsmirror
#+begin_src emacs-lisp
(package! some-package)
#+end_src

*** Packages from git repos
To install a package directly from a particular repo, you'll need to specify a ~:recipe~.
#+begin_src emacs-lisp
(package! another-package
  :recipe (:host github :repo "username/foo"))
#+end_src

If the package you are trying to install does not contain a PACKAGENAME.el file, or is located in a
subdirectory of the repo, you'll need to speicfy ~:files~ in the ~:recipe~
#+begin_src emacs-lisp
(package! this-package
  :recipe (:host github :repo "username/repo"
           :files ("some-file.el" "src/lisp/*.el")))
#+end_src

*** Disabling built-in packages
If you'd like to disable a package included with Doom, for whatever reason,
you can do so here with the ~:disable~ property:
#+begin_src emacs-lisp
(package! builtin-package :disable t)
#+end_src
You can override the recipe of a built in package without having to specify
all the properties for ~:recipe~. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:
#+begin_src emacs-lisp
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

Specify a ~:branch~ to install a package from a particular branch or tag.
#+begin_src emacs-lisp
(package! builtin-package :recipe (:branch "develop"))
#+end_src

** Convient packages
*** Rotate (window management)
#+begin_src emacs-lisp :tangle packages.el
(package! rotate)
#+end_src

*** Which-key
Make it popup a bit faster
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5) ;: Help me out there, there's a lot to remember
#+end_src

Also remove all the =evil-= prefixes
#+begin_src emacs-lisp
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+end_src

*** Pinentry
This seems needed, but I'm also not sure.
#+begin_src emacs-lisp :tangle packages.el
(package! pinentry)
#+end_src

Then enable it on launch
#+begin_src emacs-lisp
(pinentry-start)
#+end_src


** Tool packages

*** TabNine
Has seemed fairly useful overtime, although this will likely be removed at some point.
#+begin_src emacs-lisp :tangle packages.el
(package! company-tabnine)
#+end_src

Enable it
#+begin_src emacs-lisp
(use-package! company-tabnine
  :after company
  :config
  (cl-pushnew 'company-tabnine (default-value 'company-backends)))
#+end_src

*** Parinfer
This is the best plugin, it's the worst plugin. It seems to break a lot.
It also fails to pick up the correct binary. Let's help it out a bit.
#+begin_src emacs-lisp
(setq parinfer-rust-library "~/.emacs.d/.local/etc/parinfer-rust/parinfer-rust-darwin.so")
#+end_src

*** Eros
Make the prefix slightly nicer
#+begin_src emacs-lisp
(setq eros-eval-result-prefix "⟹ ") ; default =>
#+end_src

*** Company
Save keystrokes more often, because who doesn't want to be a /little/ lazier?
#+begin_src emacs-lisp
(after! company
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying.
#+end_src

Improve the memory a bit.
#+begin_src emacs-lisp
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+end_src

*** LSP
Disable the ui-doc childframe
#+begin_src emacs-lisp
(setq lsp-ui-doc-enable nil)
#+end_src
*** YASnippet
Nested snippets are cool, yo
#+begin_src emacs-lisp
(setq yas-triggers-in-field t)
#+end_src

*** Smart parentehses
#+begin_src emacs-lisp
(sp-local-pair
 '(org-mode)
 "<<" ">>"
 :actions '(insert))
#+end_src

*** Org Roam UI
Org-Roam-UI is a pretty way of looking at my network of notes, lets downloaded needed packages up here.
We also un-pin org-roam, org-roam-ui tries to keep up with the latest features of org-roam, which can lead to issues with a pinned version.
#+begin_src emacs-lisp :tangle packages.el
(unpin! org-roam)
(package! websocket)
(package! org-roam-ui :recipe (:host github :repo "org-roam/org-roam-ui" :files ("*.el" "out")))
#+end_src

Then set it all up
#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src
** Visual packages

*** Doom themes
#+begin_src emacs-lisp :tangle packages.el
(unpin! doom-themes)
#+end_src

*** Info colors
Make manual pages look a bit nicer.
#+begin_src emacs-lisp :tangle packages.el
(package! info-colors :pin "47ee73cc19b1049eef32c9f3e264ea7ef2aaf8a5")
#+end_src

Then hook into =Info=
#+begin_src emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src

*** Marginalia
#+begin_src emacs-lisp
(after! marginalia
  (setq marginalia-censor-variables nil)

  (defadvice! +marginalia--anotate-local-file-colorful (cand)
    "Just a more colourful version of `marginalia--anotate-local-file'."
    :override #'marginalia--annotate-local-file
    (when-let (attrs (file-attributes (substitute-in-file-name
                                       (marginalia--full-candidate cand))
                                      'integer))
      (marginalia--fields
       ((marginalia--file-owner attrs)
        :width 12 :face 'marginalia-file-owner)
       ((marginalia--file-modes attrs))
       ((+marginalia-file-size-colorful (file-attribute-size attrs))
        :width 7)
       ((+marginalia--time-colorful (file-attribute-modification-time attrs))
        :width 12))))

  (defun +marginalia--time-colorful (time)
    (let* ((seconds (float-time (time-subtract (current-time) time)))
           (color (doom-blend
                   (face-attribute 'marginalia-date :foreground nil t)
                   (face-attribute 'marginalia-documentation :foreground nil t)
                   (/ 1.0 (log (+ 3 (/ (+ 1 seconds) 345600.0)))))))
      ;; 1 - log(3 + 1/(days + 1)) % grey
      (propertize (marginalia--time time) 'face (list :foreground color))))

  (defun +marginalia-file-size-colorful (size)
    (let* ((size-index (/ (log10 (+ 1 size)) 7.0))
           (color (if (< size-index 10000000) ; 10m
                      (doom-blend 'orange 'green size-index)
                    (doom-blend 'red 'orange (- size-index 1)))))
      (propertize (file-size-human-readable size) 'face (list :foreground color)))))
#+end_src

** Some Fun
*** Elcord
Look, if people who use vim are going to bring it up every conversation, I'm going to do the same with emacs.
#+begin_src emacs-lisp :tangle packages.el
(package! elcord :pin "eb4ae2e7e03a5fc26b054ba2fa9a1d308e239c76")
#+end_src

#+begin_src emacs-lisp
(use-package! elcord
  :commands elcord-mode
  :config
  (setq elcord-use-major-mode-as-main-icon t))
#+end_src

* Applications
** Calculator
Let's make the Emacs =calc= a little better.

*** Defaults
#+begin_src emacs-lisp
(setq calc-angle-mode 'rad  ; radians are rad
      calc-symbolic-mode t) ; keeps expressions like \sqrt{2} irrational for as long as possible
#+end_src

* Language Configs
** Go
Use web-mode for go html templates
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.tmpl\\'" . web-mode))
(setq web-mode-engines-alist
      '(("go"    . "\\.gohtml\\'")
        ("go"    . "\\.gotmpl\\'")
        ("go"    . "\\.tmpl\\'")))
#+end_src

** Common Lisp
Load the roswell helper
#+begin_src emacs-lisp
(load (expand-file-name "~/.roswell/helper.el"))
#+end_src

** Org
Let's setup Org-Mode Here
#+begin_src emacs-lisp
;; Set directory for org
(setq
 org-directory "~/Code/org/")
;; Org mode code block syntax highlighting
(setq org-src-fontify-natively t)
;; Hide Org Markup Indicators
(after! org (setq org-hide-emphasis-markers t))
;; Insert Org Headings At Point.
(after! org (setq org-insert-heading-respect-content nil))
#+end_src

*** Org-Roam
My prefered way of taking notes.
#+begin_src emacs-lisp
(setq org-roam-directory "~/Code/org/notes")
#+end_src

** Markdown
Only use visual line wrapping.
#+begin_src emacs-lisp
(add-hook! (gfm-mode markdown-mode) #'visual-line-mode #'turn-off-auto-fill)
#+end_src
