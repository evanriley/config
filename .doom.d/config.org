#+TITLE: Wonderful World of Emacs, or my likely broken config.
#+AUTHOR: Evan Riley
#+PROPERTY: header-args :tangle yes

* Configuration
:VISIBILITY: children
:END:

** Table of Contents :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#about-this-file][About this file]]
  - [[#system-requirements][System Requirements]]
  - [[#notable-issues][Notable Issues]]
  - [[#unsorted-configurations][Unsorted Configurations]]
  - [[#configuration-file-headers][Configuration File Headers]]
    - [[#initel-header][init.el header]]
    - [[#packagesel-header][packages.el header]]
    - [[#configel-header][config.el header]]
  - [[#defaults][Defaults]]
    - [[#simple-settings][Simple Settings]]
    - [[#frame-sizing][Frame Sizing]]
    - [[#auto-customizations][Auto-customizations]]
    - [[#windows][Windows]]
    - [[#mouse-buttons][Mouse Buttons]]
  - [[#doom-modules][Doom Modules]]
  - [[#personal-information][Personal Information]]
    - [[#authinfogpg][Authinfo.gpg]]
  - [[#package-installation--configuration][Package Installation & Configuration]]
    - [[#rotate][Rotate]]
    - [[#pinentry][Pinentry]]
    - [[#tabnine][Tabnine]]
    - [[#doom-themes][Doom Themes]]
    - [[#lambda-themes][Lambda Themes]]
    - [[#info-colors][Info Colors]]
    - [[#magit][Magit]]
    - [[#which-key][Which-key]]
    - [[#eros][Eros]]
    - [[#evil][Evil]]
    - [[#consult][Consult]]
    - [[#company][Company]]
    - [[#projectile][Projectile]]
    - [[#auto-activating-snippets][Auto Activating Snippets]]
    - [[#yasnippet][YASnippet]]
    - [[#org][Org]]
    - [[#org-roam][Org Roam]]
  - [[#visual-settings][Visual Settings]]
    - [[#font][Font]]
    - [[#colorscheme][Colorscheme]]
    - [[#modeline][Modeline]]
    - [[#window-title][Window Title]]
    - [[#splash-screen][Splash Screen]]

** About this file
Hi, I see you've found my personal Doom Emacs configuration. Before we get started, I feel I need to be respectful of your time here.
Do not copy this config. It is likely broken. If we're being honest I'm not sure I would feel comfortable telling you to even
take pieces from here.

With that said...Welcome!

This configuration would not be possible without these people, who I have +stole+ been inspired by.

- [[https://github.com/tecosaur/emacs-config][tecosaur]]
- [[https://github.com/rougier/dotemacs][rougier]]
- [[https://github.com/gilbertw1/bmacs][gilbertw1]]
- [[https://github.com/zzamboni/dot-doom][zzamboni]]

and probably countless more.

** System Requirements
- [[https://github.com/doomemacs/doomemacs][Doom Emacs]]
- [[https://juliamono.netlify.app/][JuliaMono]]
- And a number of LSPs, which can be figured out by going through the ~init.el~ and looking for ~+lsp~ flag.

** Notable Issues
TODO: List issues.
** Unsorted Configurations
#+begin_src emacs-lisp
#+end_src

** Configuration File Headers
*** init.el header
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file.

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src

*** packages.el header
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file.
#+end_src

*** config.el header
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file.

#+end_src

** Defaults
*** Simple Settings

#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "…"                ; Unicode ellispis are nicer than "...", and also save /precious/ space
      password-cache-expiry nil                   ; I can trust my computers ... can't I?
      scroll-preserve-screen-position 'always     ; Don't have `point' jump around
      scroll-margin 2)                            ; It's nice to maintain a little margin

(display-time-mode 1)                             ; Enable time in the mode-line

(unless (string-match-p "^Power N/A" (battery))   ; On laptops...
  (display-battery-mode 1))                       ; it's nice to know how much power you have

(global-subword-mode 1)                           ; Iterate through CamelCase words
#+end_src

*** Frame Sizing
Control the size emacs on launch.
It doesn't really matter, yabai will handle all the sizing, but in the event yabai is broken
I have keybinds that will handle the sizing.
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(height . 24))
(add-to-list 'default-frame-alist '(width . 80))
#+end_src

*** Auto-customizations
By default customizations made by the GUI interface are placed in init.el. Let's move those to a seperate file.
Doom actually recommends against using ~M-x customize~, but this just takes care of this in the off chance I do use it.
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

*** Windows
Ask which buffer to open after splitting the window.
#+begin_src emacs-lisp
;; First enter the new window
(setq evil-vsplit-window-right t
      evil-split-window-below t)
;; Pull up buffer prompt
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

Window rotation, inspired by tmux.
#+begin_src emacs-lisp
;; (map! :map evil-window-map
;;       "SPC" #'rotate-layout
;;       ;; Navigation
;;       "<left>"     #'evil-window-left
;;       "<down>"     #'evil-window-down
;;       "<up>"       #'evil-window-up
;;       "<right>"    #'evil-window-right
;;       ;; Swapping windows
;;       "C-<left>"       #'+evil/window-move-left
;;       "C-<down>"       #'+evil/window-move-down
;;       "C-<up>"         #'+evil/window-move-up
;;       "C-<right>"      #'+evil/window-move-right)
#+end_src

*** Mouse Buttons
I sometimes explore with my mouse, use the mouse buttons to go back and forward
#+begin_src emacs-lisp
(map! :n [mouse-8] #'better-jumper-jump-backward
      :n [mouse-9] #'better-jumper-jump-forward)
#+end_src
** Doom Modules
This code is written to the =init.el= to select which modules to load.

#+begin_src emacs-lisp :tangle init.el
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       direnv
       docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       (magit             ; a git porcelain for Emacs
        +forge)
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       (beancount         ; mind the GAAP
        +lsp)
       ;;(cc +lsp)         ; C > C++ == 1
       (clojure           ; java with a lisp
        +lsp)
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go               ; the hipster dialect
        +lsp
        +tree-sitter)
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       (json              ; At least it ain't XML
        +lsp
        +tree-sitter)
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       (javascript        ; all(hope(abandon(ye(who(enter(here))))))
        +lsp
        +tree-sitter)
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       (lua               ; one-based indices? one-based indices
        +fennel
        +moonscript
        +lsp)
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org               ; organize your plain life in plain text
        +pomodoro
        +dragndrop
        +noter
        +pandoc
        +pretty
        +present
        +roam2)
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python            ; beautiful is better than ugly
        +lsp
        +pyright
        +tree-sitter)
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       (scala             ; java, but good
        +lsp
        +tree-sitter)
       ;;(scheme +guile)   ; a fully conniving family of lisps
       (sh                ; she sells {ba,z,fi}sh shells on the C xor
        +fish)
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web               ; the tubes
        +lsp
        +tree-sitter)
       yaml              ; JSON, but readable
       (zig               ; C, but simpler
        +lsp
        +tree-sitter)

       :email
       (mu4e
        +org)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src


** Personal Information
Personal information, this is used by GPG and some other stuff.
#+begin_src emacs-lisp
(setq user-full-name "Evan Riley"
      user-mail-addrss "git@evanriley.dev")
#+end_src
*** Authinfo.gpg
Use my home directory for authinfo.gpg. I delete my .emacs.d fairly often (for no good reason).
It's safer in ~ and also. Cache a lot. It won't matter.
#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry nil) ; default is 7200 (2h)
#+end_src

** Package Installation & Configuration
Let's install packages that aren't provided by doom, and unpin some that are.
*** Rotate
Rotate windows, inspired by tmux
#+begin_src emacs-lisp :tangle packages.el
(package! rotate)
#+end_src

*** Pinentry
#+begin_src emacs-lisp :tangle packages.el
(package! pinentry)
#+end_src

*** Tabnine
Tabnine, AI code recommendations. It's OK.
Probably will stop using it once my yearly subscription is over.
#+begin_src emacs-lisp :tangle packages.el
(package! company-tabnine :recipe (:host github :repo "TommyX12/company-tabnine"))
#+end_src

*** Doom Themes
Don't pin doom-themes. I usually want to try out new additions as soon as possible.
#+begin_src emacs-lisp :tangle packages.el
(unpin! doom-themes)
#+end_src

*** Lambda Themes
Beautiful themes inspired by Nicolas Rougier's Nano Emacs
#+begin_src emacs-lisp :tangle packages.el
(package! lambda-themes
  :recipe (:host github :repo "lambda-emacs/lambda-themes"))
#+end_src

*** Info Colors
Give manual pages a nice face lift.
#+begin_src emacs-lisp :tangle packages.el
(package! info-colors :pin "47ee73cc19b1049eef32c9f3e264ea7ef2aaf8a5")
#+end_src

Hook into ~Info~
#+begin_src emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src

*** Magit
Unpin what is probably the greatest emacs package
#+begin_src emacs-lisp :tangle packages.el
(unpin! magit)
#+end_src

*** Which-key
Make it popup faster.
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5)
#+end_src

*** Eros
Provide a nicer look prefix.
#+begin_src emacs-lisp
(setq eros-eval-result-prefix "⟹ ")
#+end_src

*** Evil
Make substitution global by default.
#+begin_src emacs-lisp
(after! evil
  (setq evil-ex-substitute-global t     ; I like my s/../.. to by global by default
        evil-move-cursor-back nil       ; Don't move the block cursor when toggling insert mode
        evil-kill-on-visual-paste nil)) ; Don't put overwritten text in the kill ring
#+end_src

*** Consult
No need for a seperate face between buffers and files
#+begin_src emacs-lisp
(after! consult
  (set-face-attribute 'consult-file nil :inherit 'consult-buffer)
  (setf (plist-get (alist-get 'perl consult-async-split-styles-alist) :initial) ";"))
#+end_src

*** Company
Reduce the delay on completions. Gotta save those keystrokes!
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)) ;; make aborting less annoying.
#+end_src

Improve history
#+begin_src emacs-lisp
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+end_src

*** Projectile
Don't add documentation via ~SPC h f~ and ~SPC h V~ to projectile.
#+begin_src emacs-lisp
(setq projectile-ignored-projects '("~/" "/tmp" "~/.emacs.d/.local/straight/repos/"))
(defun projectile-ignored-project-function (filepath)
  "Return t if FILEPATH is within any of `projectile-ignored-projects'"
  (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects)))
#+end_src

*** Auto Activating Snippets
#+begin_src emacs-lisp :tangle packages.el
(package! aas :recipe (:host github :repo "ymarco/auto-activating-snippets"))
#+end_src

#+begin_src emacs-lisp
(use-package! aas
  :commands aas-mode)
#+end_src

*** YASnippet
Enable nested snippets
#+begin_src emacs-lisp
(setq yas-triggers-in-field t)
#+end_src

*** Org
#+begin_src emacs-lisp :tangle packages.el
(package! org-contrib :recipe (:host nil :repo "https://git.sr.ht/~bzg/org-contrib"))
#+end_src

*** Org Roam
#+begin_src emacs-lisp :tangle packages.el
(unpin! org-roam)
(package! websocket)
(package! org-roam-ui :recipe (:host github :repo "org-roam/org-roam-ui" :files ("*.el" "out")))
#+end_src

#+begin_src emacs-lisp

#+end_src

** Visual Settings
*** Font
'JuliaMono' is my go to font.
#+begin_src emacs-lisp
(setq
 doom-font (font-spec :family "JuliaMono" :size 16)
 doom-big-font (font-spec :family "JuliaMono" :size 24)
 doom-variable-pitch-font (font-spec :family "JuliaMono" :size 16)
 doom-serif-font (font-spec :family "JuliaMono" :weight 'light))
#+end_src

*** Colorscheme
Currently set to use Lambda Themes, beautiful themes inspired by Nano Emacs

This will automatically switch betwen light and dark themes, based on my system. This requires
d12frosted/emacs-mac-plus (min version 28).
#+begin_src emacs-lisp
(defun my/apply-theme (appearance)
  "Load theme, taking current system APPEARANCE into consideration."
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (load-theme 'lambda-light t))
    ('dark (load-theme 'lambda-dark t))))

(add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
#+end_src

*** Modeline

~LF UTF-8~ is the default file encoding, we don't need to see it in the modeline when editing files.
#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  (setq-local doom-modeline-buffer-encoding
        (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                           '(coding-category-undecided coding-category-utf-8))
                     (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
          t)))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src

*** Window Title

Have just the buffer name, but if I'm in a project, also have the folder name.
#+begin_src emacs-lisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))))
#+end_src

*** Splash Screen
Some nce ascii art for the splash screen.
#+begin_src emacs-lisp
(defun doom-dashboard-draw-ascii-emacs-banner-fn ()
  (let* ((banner
          '(",---.,-.-.,---.,---.,---."
            "|---'| | |,---||    `---."
            "`---'` ' '`---^`---'`---'"))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(setq +doom-dashboard-ascii-banner-fn #'doom-dashboard-draw-ascii-emacs-banner-fn)
#+end_src

And disable the "doom usefull commands section"
#+begin_src emacs-lisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src
